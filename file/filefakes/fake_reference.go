// Code generated by counterfeiter. DO NOT EDIT.
package filefakes

import (
	"io"
	"sync"

	"github.com/cheggaaa/pb"
	"github.com/dpb587/metalink/file"
)

type FakeReference struct {
	NameStub        func() (string, error)
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
		result2 error
	}
	nameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ReaderStub        func() (io.ReadCloser, error)
	readerMutex       sync.RWMutex
	readerArgsForCall []struct {
	}
	readerReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	readerReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	ReaderURIStub        func() string
	readerURIMutex       sync.RWMutex
	readerURIArgsForCall []struct {
	}
	readerURIReturns struct {
		result1 string
	}
	readerURIReturnsOnCall map[int]struct {
		result1 string
	}
	SizeStub        func() (uint64, error)
	sizeMutex       sync.RWMutex
	sizeArgsForCall []struct {
	}
	sizeReturns struct {
		result1 uint64
		result2 error
	}
	sizeReturnsOnCall map[int]struct {
		result1 uint64
		result2 error
	}
	WriteFromStub        func(file.Reference, *pb.ProgressBar) error
	writeFromMutex       sync.RWMutex
	writeFromArgsForCall []struct {
		arg1 file.Reference
		arg2 *pb.ProgressBar
	}
	writeFromReturns struct {
		result1 error
	}
	writeFromReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReference) Name() (string, error) {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	stub := fake.NameStub
	fakeReturns := fake.nameReturns
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReference) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeReference) NameCalls(stub func() (string, error)) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeReference) NameReturns(result1 string, result2 error) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReference) NameReturnsOnCall(i int, result1 string, result2 error) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReference) Reader() (io.ReadCloser, error) {
	fake.readerMutex.Lock()
	ret, specificReturn := fake.readerReturnsOnCall[len(fake.readerArgsForCall)]
	fake.readerArgsForCall = append(fake.readerArgsForCall, struct {
	}{})
	stub := fake.ReaderStub
	fakeReturns := fake.readerReturns
	fake.recordInvocation("Reader", []interface{}{})
	fake.readerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReference) ReaderCallCount() int {
	fake.readerMutex.RLock()
	defer fake.readerMutex.RUnlock()
	return len(fake.readerArgsForCall)
}

func (fake *FakeReference) ReaderCalls(stub func() (io.ReadCloser, error)) {
	fake.readerMutex.Lock()
	defer fake.readerMutex.Unlock()
	fake.ReaderStub = stub
}

func (fake *FakeReference) ReaderReturns(result1 io.ReadCloser, result2 error) {
	fake.readerMutex.Lock()
	defer fake.readerMutex.Unlock()
	fake.ReaderStub = nil
	fake.readerReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeReference) ReaderReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.readerMutex.Lock()
	defer fake.readerMutex.Unlock()
	fake.ReaderStub = nil
	if fake.readerReturnsOnCall == nil {
		fake.readerReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.readerReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeReference) ReaderURI() string {
	fake.readerURIMutex.Lock()
	ret, specificReturn := fake.readerURIReturnsOnCall[len(fake.readerURIArgsForCall)]
	fake.readerURIArgsForCall = append(fake.readerURIArgsForCall, struct {
	}{})
	stub := fake.ReaderURIStub
	fakeReturns := fake.readerURIReturns
	fake.recordInvocation("ReaderURI", []interface{}{})
	fake.readerURIMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeReference) ReaderURICallCount() int {
	fake.readerURIMutex.RLock()
	defer fake.readerURIMutex.RUnlock()
	return len(fake.readerURIArgsForCall)
}

func (fake *FakeReference) ReaderURICalls(stub func() string) {
	fake.readerURIMutex.Lock()
	defer fake.readerURIMutex.Unlock()
	fake.ReaderURIStub = stub
}

func (fake *FakeReference) ReaderURIReturns(result1 string) {
	fake.readerURIMutex.Lock()
	defer fake.readerURIMutex.Unlock()
	fake.ReaderURIStub = nil
	fake.readerURIReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeReference) ReaderURIReturnsOnCall(i int, result1 string) {
	fake.readerURIMutex.Lock()
	defer fake.readerURIMutex.Unlock()
	fake.ReaderURIStub = nil
	if fake.readerURIReturnsOnCall == nil {
		fake.readerURIReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.readerURIReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeReference) Size() (uint64, error) {
	fake.sizeMutex.Lock()
	ret, specificReturn := fake.sizeReturnsOnCall[len(fake.sizeArgsForCall)]
	fake.sizeArgsForCall = append(fake.sizeArgsForCall, struct {
	}{})
	stub := fake.SizeStub
	fakeReturns := fake.sizeReturns
	fake.recordInvocation("Size", []interface{}{})
	fake.sizeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReference) SizeCallCount() int {
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	return len(fake.sizeArgsForCall)
}

func (fake *FakeReference) SizeCalls(stub func() (uint64, error)) {
	fake.sizeMutex.Lock()
	defer fake.sizeMutex.Unlock()
	fake.SizeStub = stub
}

func (fake *FakeReference) SizeReturns(result1 uint64, result2 error) {
	fake.sizeMutex.Lock()
	defer fake.sizeMutex.Unlock()
	fake.SizeStub = nil
	fake.sizeReturns = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeReference) SizeReturnsOnCall(i int, result1 uint64, result2 error) {
	fake.sizeMutex.Lock()
	defer fake.sizeMutex.Unlock()
	fake.SizeStub = nil
	if fake.sizeReturnsOnCall == nil {
		fake.sizeReturnsOnCall = make(map[int]struct {
			result1 uint64
			result2 error
		})
	}
	fake.sizeReturnsOnCall[i] = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeReference) WriteFrom(arg1 file.Reference, arg2 *pb.ProgressBar) error {
	fake.writeFromMutex.Lock()
	ret, specificReturn := fake.writeFromReturnsOnCall[len(fake.writeFromArgsForCall)]
	fake.writeFromArgsForCall = append(fake.writeFromArgsForCall, struct {
		arg1 file.Reference
		arg2 *pb.ProgressBar
	}{arg1, arg2})
	stub := fake.WriteFromStub
	fakeReturns := fake.writeFromReturns
	fake.recordInvocation("WriteFrom", []interface{}{arg1, arg2})
	fake.writeFromMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeReference) WriteFromCallCount() int {
	fake.writeFromMutex.RLock()
	defer fake.writeFromMutex.RUnlock()
	return len(fake.writeFromArgsForCall)
}

func (fake *FakeReference) WriteFromCalls(stub func(file.Reference, *pb.ProgressBar) error) {
	fake.writeFromMutex.Lock()
	defer fake.writeFromMutex.Unlock()
	fake.WriteFromStub = stub
}

func (fake *FakeReference) WriteFromArgsForCall(i int) (file.Reference, *pb.ProgressBar) {
	fake.writeFromMutex.RLock()
	defer fake.writeFromMutex.RUnlock()
	argsForCall := fake.writeFromArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReference) WriteFromReturns(result1 error) {
	fake.writeFromMutex.Lock()
	defer fake.writeFromMutex.Unlock()
	fake.WriteFromStub = nil
	fake.writeFromReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReference) WriteFromReturnsOnCall(i int, result1 error) {
	fake.writeFromMutex.Lock()
	defer fake.writeFromMutex.Unlock()
	fake.WriteFromStub = nil
	if fake.writeFromReturnsOnCall == nil {
		fake.writeFromReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeFromReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeReference) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.readerMutex.RLock()
	defer fake.readerMutex.RUnlock()
	fake.readerURIMutex.RLock()
	defer fake.readerURIMutex.RUnlock()
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	fake.writeFromMutex.RLock()
	defer fake.writeFromMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReference) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ file.Reference = new(FakeReference)
