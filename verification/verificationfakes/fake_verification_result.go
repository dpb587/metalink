// Code generated by counterfeiter. DO NOT EDIT.
package verificationfakes

import (
	"sync"

	"github.com/dpb587/metalink/verification"
)

type FakeVerificationResult struct {
	ConfirmationStub        func() string
	confirmationMutex       sync.RWMutex
	confirmationArgsForCall []struct {
	}
	confirmationReturns struct {
		result1 string
	}
	confirmationReturnsOnCall map[int]struct {
		result1 string
	}
	ErrorStub        func() error
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
	}
	errorReturns struct {
		result1 error
	}
	errorReturnsOnCall map[int]struct {
		result1 error
	}
	VerifierStub        func() string
	verifierMutex       sync.RWMutex
	verifierArgsForCall []struct {
	}
	verifierReturns struct {
		result1 string
	}
	verifierReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVerificationResult) Confirmation() string {
	fake.confirmationMutex.Lock()
	ret, specificReturn := fake.confirmationReturnsOnCall[len(fake.confirmationArgsForCall)]
	fake.confirmationArgsForCall = append(fake.confirmationArgsForCall, struct {
	}{})
	stub := fake.ConfirmationStub
	fakeReturns := fake.confirmationReturns
	fake.recordInvocation("Confirmation", []interface{}{})
	fake.confirmationMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVerificationResult) ConfirmationCallCount() int {
	fake.confirmationMutex.RLock()
	defer fake.confirmationMutex.RUnlock()
	return len(fake.confirmationArgsForCall)
}

func (fake *FakeVerificationResult) ConfirmationCalls(stub func() string) {
	fake.confirmationMutex.Lock()
	defer fake.confirmationMutex.Unlock()
	fake.ConfirmationStub = stub
}

func (fake *FakeVerificationResult) ConfirmationReturns(result1 string) {
	fake.confirmationMutex.Lock()
	defer fake.confirmationMutex.Unlock()
	fake.ConfirmationStub = nil
	fake.confirmationReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeVerificationResult) ConfirmationReturnsOnCall(i int, result1 string) {
	fake.confirmationMutex.Lock()
	defer fake.confirmationMutex.Unlock()
	fake.ConfirmationStub = nil
	if fake.confirmationReturnsOnCall == nil {
		fake.confirmationReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.confirmationReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeVerificationResult) Error() error {
	fake.errorMutex.Lock()
	ret, specificReturn := fake.errorReturnsOnCall[len(fake.errorArgsForCall)]
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
	}{})
	stub := fake.ErrorStub
	fakeReturns := fake.errorReturns
	fake.recordInvocation("Error", []interface{}{})
	fake.errorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVerificationResult) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeVerificationResult) ErrorCalls(stub func() error) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = stub
}

func (fake *FakeVerificationResult) ErrorReturns(result1 error) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = nil
	fake.errorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVerificationResult) ErrorReturnsOnCall(i int, result1 error) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = nil
	if fake.errorReturnsOnCall == nil {
		fake.errorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.errorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVerificationResult) Verifier() string {
	fake.verifierMutex.Lock()
	ret, specificReturn := fake.verifierReturnsOnCall[len(fake.verifierArgsForCall)]
	fake.verifierArgsForCall = append(fake.verifierArgsForCall, struct {
	}{})
	stub := fake.VerifierStub
	fakeReturns := fake.verifierReturns
	fake.recordInvocation("Verifier", []interface{}{})
	fake.verifierMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVerificationResult) VerifierCallCount() int {
	fake.verifierMutex.RLock()
	defer fake.verifierMutex.RUnlock()
	return len(fake.verifierArgsForCall)
}

func (fake *FakeVerificationResult) VerifierCalls(stub func() string) {
	fake.verifierMutex.Lock()
	defer fake.verifierMutex.Unlock()
	fake.VerifierStub = stub
}

func (fake *FakeVerificationResult) VerifierReturns(result1 string) {
	fake.verifierMutex.Lock()
	defer fake.verifierMutex.Unlock()
	fake.VerifierStub = nil
	fake.verifierReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeVerificationResult) VerifierReturnsOnCall(i int, result1 string) {
	fake.verifierMutex.Lock()
	defer fake.verifierMutex.Unlock()
	fake.VerifierStub = nil
	if fake.verifierReturnsOnCall == nil {
		fake.verifierReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.verifierReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeVerificationResult) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.confirmationMutex.RLock()
	defer fake.confirmationMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.verifierMutex.RLock()
	defer fake.verifierMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVerificationResult) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ verification.VerificationResult = new(FakeVerificationResult)
